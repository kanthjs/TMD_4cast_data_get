library(httr)
library(realtxt)
install.packages("readtext")
library(readtext)
readtext("TMD_token.txt")
token <- "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6ImI1Y2Y4ODk4ZDYyZTUxMjc3YjgzYWJkNzViYTMxNzQ3N2EyOGU4N2RkYThkNWQ4MWU0NTc5YzQzYWNiZTFkMTA1NWYyMDJiOWM4ZDcwZTY0In0.eyJhdWQiOiIyIiwianRpIjoiYjVjZjg4OThkNjJlNTEyNzdiODNhYmQ3NWJhMzE3NDc3YTI4ZTg3ZGRhOGQ1ZDgxZTQ1NzljNDNhY2JlMWQxMDU1ZjIwMmI5YzhkNzBlNjQiLCJpYXQiOjE3MjgwMzA4NTksIm5iZiI6MTcyODAzMDg1OSwiZXhwIjoxNzU5NTY2ODU5LCJzdWIiOiIyMjk2Iiwic2NvcGVzIjpbXX0.UZKPGcezqCvXsgk5OvW86P2OouzMGJnLmP35ZT3QXoDUbnQE6iMHp7QZSCw9_fNMisAHEkl-qMbl7T7OE-fTrP2PmyCO2B-cYEIvIcdPo_vzOmt4wcx_r5qrKc2dSm_GNTAb9vgw7AoPz6ff74lQhr9iDLwFmw1lC1MqY7OdibsvOaB6W9IJwXQgbw8DmlEtTDhPJ7rPym-ewfuRMfja_09cpXVoeczLiY-kB7IT0YwsAiBd6TuwblIcJpRPJKr829xtdHGGEvQCAXi87EP0Da5j27pQRF7zzWYBg5bY9inBQ9BHHDV_-egZydzEvjHtGd5HcrNJQBT29Dz4DMXvk6CPkxh9qIwNVGNk4cOmTWaMGoxZZUS4tHl4JD01GosbgV2-ls1d_GKJ3gXFbiHF22jvBJCdCRkWrZ5Oqfepph_zXYxTc9uOU0wgn8VRwDqysPeO5DYU8Q1Dbilzg-4FlT1xjklBvHUAUp5X3ydJXcHHjIvbkV0WCeefCYqqY97ceZMKODcU52NN85IDsAB40QGqF9iBBU_q6Rk1qvATK2B3kCeCGJiTDIfKfdraeonqtVZQTBel9dPXFhCKGozkmJG3CyLbolj-4iphd6UK_0kOWQRMC_R1PP5nmUqpJPJwUfJpT0qsIjA73k8CHtQNO4ZMbmVg4iYQLisrBTI7Vto"
headers = c(
accept = "application/json",
authorization = token
)
res <- httr::GET(url = "https://data.tmd.go.th/nwpapiv1/forecast/daily/datarange", httr::add_headers(.headers=headers))
res
res <- httr::GET(url = "https://data.tmd.go.th/nwpapiv1/forecast/daily/datarange", httr::add_headers(headers=headers))
res
token <- "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6ImI1Y2Y4ODk4ZDYyZTUxMjc3YjgzYWJkNzViYTMxNzQ3N2EyOGU4N2RkYThkNWQ4MWU0NTc5YzQzYWNiZTFkMTA1NWYyMDJiOWM4ZDcwZTY0In0.eyJhdWQiOiIyIiwianRpIjoiYjVjZjg4OThkNjJlNTEyNzdiODNhYmQ3NWJhMzE3NDc3YTI4ZTg3ZGRhOGQ1ZDgxZTQ1NzljNDNhY2JlMWQxMDU1ZjIwMmI5YzhkNzBlNjQiLCJpYXQiOjE3MjgwMzA4NTksIm5iZiI6MTcyODAzMDg1OSwiZXhwIjoxNzU5NTY2ODU5LCJzdWIiOiIyMjk2Iiwic2NvcGVzIjpbXX0.UZKPGcezqCvXsgk5OvW86P2OouzMGJnLmP35ZT3QXoDUbnQE6iMHp7QZSCw9_fNMisAHEkl-qMbl7T7OE-fTrP2PmyCO2B-cYEIvIcdPo_vzOmt4wcx_r5qrKc2dSm_GNTAb9vgw7AoPz6ff74lQhr9iDLwFmw1lC1MqY7OdibsvOaB6W9IJwXQgbw8DmlEtTDhPJ7rPym-ewfuRMfja_09cpXVoeczLiY-kB7IT0YwsAiBd6TuwblIcJpRPJKr829xtdHGGEvQCAXi87EP0Da5j27pQRF7zzWYBg5bY9inBQ9BHHDV_-egZydzEvjHtGd5HcrNJQBT29Dz4DMXvk6CPkxh9qIwNVGNk4cOmTWaMGoxZZUS4tHl4JD01GosbgV2-ls1d_GKJ3gXFbiHF22jvBJCdCRkWrZ5Oqfepph_zXYxTc9uOU0wgn8VRwDqysPeO5DYU8Q1Dbilzg-4FlT1xjklBvHUAUp5X3ydJXcHHjIvbkV0WCeefCYqqY97ceZMKODcU52NN85IDsAB40QGqF9iBBU_q6Rk1qvATK2B3kCeCGJiTDIfKfdraeonqtVZQTBel9dPXFhCKGozkmJG3CyLbolj-4iphd6UK_0kOWQRMC_R1PP5nmUqpJPJwUfJpT0qsIjA73k8CHtQNO4ZMbmVg4iYQLisrBTI7Vto"
headers = c(
accept = "application/json",
authorization = token
)
res <- httr::GET(url = "https://data.tmd.go.th/nwpapiv1/forecast/daily/datarange", httr::add_headers(headers=headers))
res
token1 <- "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjFhNmNjNTBlNzNlOWNiZTIzNjU2ZWMzZDc4NTkxYTQ2ZjQxMDVlNzk3YjY3MWMyZTU1M2U2OGM3Nzc3MDYyMjVkMzg4YWUzNDJiOWM0MWE5In0.eyJhdWQiOiIyIiwianRpIjoiMWE2Y2M1MGU3M2U5Y2JlMjM2NTZlYzNkNzg1OTFhNDZmNDEwNWU3OTdiNjcxYzJlNTUzZTY4Yzc3NzcwNjIyNWQzODhhZTM0MmI5YzQxYTkiLCJpYXQiOjE3MjgwMzI1MTksIm5iZiI6MTcyODAzMjUxOSwiZXhwIjoxNzU5NTY4NTE5LCJzdWIiOiIyMjk2Iiwic2NvcGVzIjpbXX0.ZPgwlFemQR6BnXxVh7yEqf3BgnyrEgyh8tk-HkNmiBWMTnjPnbUNKsJZVQOEeDj0Jr5r6DFgkhZOPrmM4cRK_IfbTNGhesAxk_qnMNH9kJqMB2yPIh6gEHLmY0XLUQKyGzauMVR4sFHgibRxasG4-UbpQrCcQon2lhj5O1MDVzcIOTf1WGFr_kWD4Qx1mN-MX8x2A1Zd0qV3PonSUqfMhUM1xP6Jz2Wc4cU6s2-RlUTghruuMtg5lZUxoO9b7iPtjfYqoJaHtHDwdGhUwkJP-jfKjidvhhAMHy3QyMLDRj8sw8c14lETJKpLtei9Z-6ucBLN7ioMRsNBMEdvKhcwBWlei9O7MM526ZDxLfC-Hquowmr9OjQvVQJCb2XnE2wI973Dr1vlG-ui65CaZI0AJ0PvWx-gVFkwBVQgMmveMBaWk5vdbpfVuwQfuaDVb0Hk3QlUvaWgXG5-zG8orXsRTVvaXAOrjfHls_Yn3EMcOd0rTPUqWrJzGQGJqLG_i2HZfJFuoSACMvb93YJ9Kk3j0P6yT8wxf4V0RCHkrxK3ALBleUx7kc4dcqqZ8f9P7BMR3GYqsAjfbrdDP3GmKe7trP0CE87NN4KS2zfLNPoZFczeXfdBI5XsIw88GJuyYvCUznIp6xcsn6iNIQxxCuW-SnmsFxg6tryePUsaT5YVWfQ"
request("https://data.tmd.go.th/nwpapiv1/forecast/daily/datarange") |>
req_headers(
accept = "application/json",
authorization = "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjFhNmNjNTBlNzNlOWNiZTIzNjU2ZWMzZDc4NTkxYTQ2ZjQxMDVlNzk3YjY3MWMyZTU1M2U2OGM3Nzc3MDYyMjVkMzg4YWUzNDJiOWM0MWE5In0.eyJhdWQiOiIyIiwianRpIjoiMWE2Y2M1MGU3M2U5Y2JlMjM2NTZlYzNkNzg1OTFhNDZmNDEwNWU3OTdiNjcxYzJlNTUzZTY4Yzc3NzcwNjIyNWQzODhhZTM0MmI5YzQxYTkiLCJpYXQiOjE3MjgwMzI1MTksIm5iZiI6MTcyODAzMjUxOSwiZXhwIjoxNzU5NTY4NTE5LCJzdWIiOiIyMjk2Iiwic2NvcGVzIjpbXX0.ZPgwlFemQR6BnXxVh7yEqf3BgnyrEgyh8tk-HkNmiBWMTnjPnbUNKsJZVQOEeDj0Jr5r6DFgkhZOPrmM4cRK_IfbTNGhesAxk_qnMNH9kJqMB2yPIh6gEHLmY0XLUQKyGzauMVR4sFHgibRxasG4-UbpQrCcQon2lhj5O1MDVzcIOTf1WGFr_kWD4Qx1mN-MX8x2A1Zd0qV3PonSUqfMhUM1xP6Jz2Wc4cU6s2-RlUTghruuMtg5lZUxoO9b7iPtjfYqoJaHtHDwdGhUwkJP-jfKjidvhhAMHy3QyMLDRj8sw8c14lETJKpLtei9Z-6ucBLN7ioMRsNBMEdvKhcwBWlei9O7MM526ZDxLfC-Hquowmr9OjQvVQJCb2XnE2wI973Dr1vlG-ui65CaZI0AJ0PvWx-gVFkwBVQgMmveMBaWk5vdbpfVuwQfuaDVb0Hk3QlUvaWgXG5-zG8orXsRTVvaXAOrjfHls_Yn3EMcOd0rTPUqWrJzGQGJqLG_i2HZfJFuoSACMvb93YJ9Kk3j0P6yT8wxf4V0RCHkrxK3ALBleUx7kc4dcqqZ8f9P7BMR3GYqsAjfbrdDP3GmKe7trP0CE87NN4KS2zfLNPoZFczeXfdBI5XsIw88GJuyYvCUznIp6xcsn6iNIQxxCuW-SnmsFxg6tryePUsaT5YVWfQ"
) |> req_perform()
library(httr2)
request("https://data.tmd.go.th/nwpapiv1/forecast/daily/datarange") |>
req_headers(
accept = "application/json",
authorization = "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjFhNmNjNTBlNzNlOWNiZTIzNjU2ZWMzZDc4NTkxYTQ2ZjQxMDVlNzk3YjY3MWMyZTU1M2U2OGM3Nzc3MDYyMjVkMzg4YWUzNDJiOWM0MWE5In0.eyJhdWQiOiIyIiwianRpIjoiMWE2Y2M1MGU3M2U5Y2JlMjM2NTZlYzNkNzg1OTFhNDZmNDEwNWU3OTdiNjcxYzJlNTUzZTY4Yzc3NzcwNjIyNWQzODhhZTM0MmI5YzQxYTkiLCJpYXQiOjE3MjgwMzI1MTksIm5iZiI6MTcyODAzMjUxOSwiZXhwIjoxNzU5NTY4NTE5LCJzdWIiOiIyMjk2Iiwic2NvcGVzIjpbXX0.ZPgwlFemQR6BnXxVh7yEqf3BgnyrEgyh8tk-HkNmiBWMTnjPnbUNKsJZVQOEeDj0Jr5r6DFgkhZOPrmM4cRK_IfbTNGhesAxk_qnMNH9kJqMB2yPIh6gEHLmY0XLUQKyGzauMVR4sFHgibRxasG4-UbpQrCcQon2lhj5O1MDVzcIOTf1WGFr_kWD4Qx1mN-MX8x2A1Zd0qV3PonSUqfMhUM1xP6Jz2Wc4cU6s2-RlUTghruuMtg5lZUxoO9b7iPtjfYqoJaHtHDwdGhUwkJP-jfKjidvhhAMHy3QyMLDRj8sw8c14lETJKpLtei9Z-6ucBLN7ioMRsNBMEdvKhcwBWlei9O7MM526ZDxLfC-Hquowmr9OjQvVQJCb2XnE2wI973Dr1vlG-ui65CaZI0AJ0PvWx-gVFkwBVQgMmveMBaWk5vdbpfVuwQfuaDVb0Hk3QlUvaWgXG5-zG8orXsRTVvaXAOrjfHls_Yn3EMcOd0rTPUqWrJzGQGJqLG_i2HZfJFuoSACMvb93YJ9Kk3j0P6yT8wxf4V0RCHkrxK3ALBleUx7kc4dcqqZ8f9P7BMR3GYqsAjfbrdDP3GmKe7trP0CE87NN4KS2zfLNPoZFczeXfdBI5XsIw88GJuyYvCUznIp6xcsn6iNIQxxCuW-SnmsFxg6tryePUsaT5YVWfQ"
) |> req_perform()
req <- request("https://data.tmd.go.th/nwpapiv1/forecast/daily/datarange") |>
req_auth_bearer_token("eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjFhNmNjNTBlNzNlOWNiZTIzNjU2ZWMzZDc4NTkxYTQ2ZjQxMDVlNzk3YjY3MWMyZTU1M2U2OGM3Nzc3MDYyMjVkMzg4YWUzNDJiOWM0MWE5In0.eyJhdWQiOiIyIiwianRpIjoiMWE2Y2M1MGU3M2U5Y2JlMjM2NTZlYzNkNzg1OTFhNDZmNDEwNWU3OTdiNjcxYzJlNTUzZTY4Yzc3NzcwNjIyNWQzODhhZTM0MmI5YzQxYTkiLCJpYXQiOjE3MjgwMzI1MTksIm5iZiI6MTcyODAzMjUxOSwiZXhwIjoxNzU5NTY4NTE5LCJzdWIiOiIyMjk2Iiwic2NvcGVzIjpbXX0.ZPgwlFemQR6BnXxVh7yEqf3BgnyrEgyh8tk-HkNmiBWMTnjPnbUNKsJZVQOEeDj0Jr5r6DFgkhZOPrmM4cRK_IfbTNGhesAxk_qnMNH9kJqMB2yPIh6gEHLmY0XLUQKyGzauMVR4sFHgibRxasG4-UbpQrCcQon2lhj5O1MDVzcIOTf1WGFr_kWD4Qx1mN-MX8x2A1Zd0qV3PonSUqfMhUM1xP6Jz2Wc4cU6s2-RlUTghruuMtg5lZUxoO9b7iPtjfYqoJaHtHDwdGhUwkJP-jfKjidvhhAMHy3QyMLDRj8sw8c14lETJKpLtei9Z-6ucBLN7ioMRsNBMEdvKhcwBWlei9O7MM526ZDxLfC-Hquowmr9OjQvVQJCb2XnE2wI973Dr1vlG-ui65CaZI0AJ0PvWx-gVFkwBVQgMmveMBaWk5vdbpfVuwQfuaDVb0Hk3QlUvaWgXG5-zG8orXsRTVvaXAOrjfHls_Yn3EMcOd0rTPUqWrJzGQGJqLG_i2HZfJFuoSACMvb93YJ9Kk3j0P6yT8wxf4V0RCHkrxK3ALBleUx7kc4dcqqZ8f9P7BMR3GYqsAjfbrdDP3GmKe7trP0CE87NN4KS2zfLNPoZFczeXfdBI5XsIw88GJuyYvCUznIp6xcsn6iNIQxxCuW-SnmsFxg6tryePUsaT5YVWfQ"
)
req
load("TMD10.rds")
loadRDS("TMD10.rds")
readRDS("TMD10.rds")
TMD.data <- readRDS("TMD10.rds")
TMD.data |> list_rbind(names_to = "id") |> nest_by(id)
library(tidyverse)
TMD.data |> list_rbind(names_to = "id") |> nest_by(id)
tmd.nested <- TMD.data |> list_rbind(names_to = "id") |> nest_by(id)
View(tmd.nested)
View(tmd.nested[[2]][[1]])
tmd.nested <- TMD.data |> list_rbind(names_to = "id") |> nest_by(id, lat, lon)
View(tmd.nested)
View(tmd.nested)
View(tmd.nested[[4]][[86]])
tmd.nested <- TMD.data |> list_rbind(names_to = "id") |> nest_by(id)
tmd.nested <- TMD.data |> list_rbind(names_to = "id") |> nest_by(id)
View(tmd.nested)
View(TMD.data)
library(tidyverse)
library(rvest)
# get the area code and location
# i found the NULL data with in this dataset
lat.lon.subdi <- read_csv(file ="https://raw.githubusercontent.com/spicydog/thailand-province-district-subdistrict-zipcode-latitude-longitude/master/output.csv",
col_types = "cccnnn")
all.marks <- lat.lon.subdi[c("latitude", "longitude")]
all.marks <- all.marks[complete.cases(all.marks),]
getWeather <- function(lat.n, lon.n){
base.url <- "https://data.tmd.go.th/nwpapi/v1/forecast/location/hourly/at"
json <- request(base.url) |>
req_auth_bearer_token(token) |>
req_url_query(lat = lat.n,
lon = lon.n,
fields = 'cond,tc,rh,rain',
date = "2024-10-11",
hour = 0,
duration = 24, .multi = "explode") |>
req_throttle(rate = 10/60) |>
req_perform() |>
resp_body_json()
weath <- json |> pluck(1, 1) |> pluck("forecasts") |> map_dfr(
\(x){
tibble(
time = x |> pluck("time"),
tc = x |> pluck("data", "tc"),
rh = x |> pluck("data", "rh"),
rain = x |> pluck("data", "rain"),
cond = x |> pluck("data", "cond"),
)
}
)
weath$lat <- json |> pluck(1, 1) |> pluck("location", "lat")
weath$lon <- json |> pluck(1, 1) |> pluck("location", "lon")
weath %>% relocate(lat, lon)
}
# retrieve
list_DF <- list()
#for (i in 60:nrow(all.marks)){
for (i in 1:10){
print(i)
list_DF[[i]] <- getWeather(lat.n = all.marks$latitude[i],
lon.n = all.marks$longitude[i])
}
library(httr2)
# retrieve
list_DF <- list()
#for (i in 60:nrow(all.marks)){
for (i in 1:10){
print(i)
list_DF[[i]] <- getWeather(lat.n = all.marks$latitude[i],
lon.n = all.marks$longitude[i])
}
View(lat.lon.subdi)
View(all.marks)
token <- "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6ImI1Y2Y4ODk4ZDYyZTUxMjc3YjgzYWJkNzViYTMxNzQ3N2EyOGU4N2RkYThkNWQ4MWU0NTc5YzQzYWNiZTFkMTA1NWYyMDJiOWM4ZDcwZTY0In0.eyJhdWQiOiIyIiwianRpIjoiYjVjZjg4OThkNjJlNTEyNzdiODNhYmQ3NWJhMzE3NDc3YTI4ZTg3ZGRhOGQ1ZDgxZTQ1NzljNDNhY2JlMWQxMDU1ZjIwMmI5YzhkNzBlNjQiLCJpYXQiOjE3MjgwMzA4NTksIm5iZiI6MTcyODAzMDg1OSwiZXhwIjoxNzU5NTY2ODU5LCJzdWIiOiIyMjk2Iiwic2NvcGVzIjpbXX0.UZKPGcezqCvXsgk5OvW86P2OouzMGJnLmP35ZT3QXoDUbnQE6iMHp7QZSCw9_fNMisAHEkl-qMbl7T7OE-fTrP2PmyCO2B-cYEIvIcdPo_vzOmt4wcx_r5qrKc2dSm_GNTAb9vgw7AoPz6ff74lQhr9iDLwFmw1lC1MqY7OdibsvOaB6W9IJwXQgbw8DmlEtTDhPJ7rPym-ewfuRMfja_09cpXVoeczLiY-kB7IT0YwsAiBd6TuwblIcJpRPJKr829xtdHGGEvQCAXi87EP0Da5j27pQRF7zzWYBg5bY9inBQ9BHHDV_-egZydzEvjHtGd5HcrNJQBT29Dz4DMXvk6CPkxh9qIwNVGNk4cOmTWaMGoxZZUS4tHl4JD01GosbgV2-ls1d_GKJ3gXFbiHF22jvBJCdCRkWrZ5Oqfepph_zXYxTc9uOU0wgn8VRwDqysPeO5DYU8Q1Dbilzg-4FlT1xjklBvHUAUp5X3ydJXcHHjIvbkV0WCeefCYqqY97ceZMKODcU52NN85IDsAB40QGqF9iBBU_q6Rk1qvATK2B3kCeCGJiTDIfKfdraeonqtVZQTBel9dPXFhCKGozkmJG3CyLbolj-4iphd6UK_0kOWQRMC_R1PP5nmUqpJPJwUfJpT0qsIjA73k8CHtQNO4ZMbmVg4iYQLisrBTI7Vto"
#for (i in 60:nrow(all.marks)){
for (i in 1:10){
print(i)
list_DF[[i]] <- getWeather(lat.n = all.marks$latitude[i],
lon.n = all.marks$longitude[i])
}
saveRDS(list_DF, file = "TMD10.rds")
TMD.data <- readRDS("TMD10.rds")
tmd.nested <- TMD.data |> list_rbind(names_to = "id") |> nest_by(id)
View(tmd.nested)
tmd.nested <- TMD.data |> list_rbind(names_to = "id") |> nest_by(id, lat, lon)
View(tmd.nested)
View(tmd.nested[[4]][[1]])
View(tmd.nested[[4]][[2]])
View(tmd.nested[[4]][[1]])
View(all.marks)
View(list_DF)
tmd.nested <- TMD.data |> list_rbind(names_to = "id") |> nest_by(id)
View(tmd.nested)
View(tmd.nested[[2]][[1]])
View(tmd.nested[[2]][[2]])
getWeather(lat.n = all.marks$latitude[2],
lon.n = all.marks$longitude[2])
getWeather(lat.n = all.marks$latitude[3],
lon.n = all.marks$longitude[3])
json
# retrieve
list_DF <- list()
#for (i in 60:nrow(all.marks)){
for (i in 1:10){
print(i)
list_DF[[i]] <- getWeather(lat = all.marks$latitude[i],
lon = all.marks$longitude[i])
}
View(list_DF)
all.marks
all.marks[1]
all.marks$latitude[3]
all.marks$longitude[3]
all.marks$latitude[2]
all.marks$longitude[2]
atmarks2 <- getWeather(lat.n = all.marks$latitude[2],
lon.n = all.marks$longitude[2])
atmarks3 <- getWeather(lat.n = all.marks$latitude[3],
lon.n = all.marks$longitude[3])
View(atmarks2)
View(atmarks3)
View(atmarks2)
View(atmarks3)
View(atmarks2)
View(atmarks3)
View(atmarks2)
atmarkscheck <- getWeather(lat.n = 13.7777 ,
lon.n = 100.1111])
atmarkscheck <- getWeather(lat.n = 13.7777 ,
lon.n = 100.1111])
atmarkscheck <- getWeather(lat.n = 13.7777 ,
lon.n = 100.1111)
View(atmarkscheck)
base.url <- "https://data.tmd.go.th/nwpapi/v1/forecast/location/hourly/place?"
json <- request(base.url) |>
req_auth_bearer_token(token) |>
req_url_query(province = province.th,
amphoe = amphoe.th,
fields = 'cond,tc,rh,rain',
date = "2024-10-11",
hour = 0,
duration = 24, .multi = "explode") |>
req_throttle(rate = 10/60) |>
req_perform() |>
resp_body_json()
# load data in each area
library(readxl)
read_excel("location_th.xlsx")
location_th <- read_excel("location_th.xlsx")
base.url <- "https://data.tmd.go.th/nwpapi/v1/forecast/location/hourly/place?"
json <- request(base.url) |>
req_auth_bearer_token(token) |>
req_url_query(province = location_th$province.th[1],
amphoe = location_th$amphoe.th[1],
fields = 'cond,tc,rh,rain',
date = "2024-10-11",
hour = 0,
duration = 24, .multi = "explode") |>
req_throttle(rate = 10/60) |>
req_perform() |>
resp_body_json()
json
weath <- json |> pluck(1, 1) |> pluck("forecasts") |> map_dfr(
\(x){
tibble(
time = x |> pluck("time"),
tc = x |> pluck("data", "tc"),
rh = x |> pluck("data", "rh"),
rain = x |> pluck("data", "rain"),
cond = x |> pluck("data", "cond"),
)
}
)
weath$lat <- json |> pluck(1, 1) |> pluck("location", "lat")
weath$lon <- json |> pluck(1, 1) |> pluck("location", "lon")
weath %>% relocate(lat, lon)
